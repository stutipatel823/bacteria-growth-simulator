{"ast":null,"code":"var _jsxFileName = \"/Users/stutipatel/Desktop/bacteria-growth-simulator/src/components/Chart.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chart = ({\n  growthData,\n  type\n}) => {\n  const svgHeight = 233;\n  const svgWidth = 480;\n  const barWidth = svgWidth / growthData.length;\n  let maxActive = 0;\n  for (const data of growthData) {\n    if (data.totalActiveCells > maxActive) {\n      maxActive = data.totalActiveCells;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"80%\",\n      position: \"relative\",\n      border: \"0px solid red\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"100%\",\n      height: \"100%\",\n      children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n        x: 0,\n        y: 0,\n        width: svgWidth,\n        height: svgHeight,\n        fill: \"#ececec\",\n        stroke: \"#D3D3D3\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), type === \"line\" ? /*#__PURE__*/_jsxDEV(\"polyline\", {\n        points: growthData.map((data, index) => {\n          const x = index * (barWidth + 2);\n          const y = svgHeight - data.totalActiveCells * (svgHeight / maxActive);\n          return `${x},${y}`;\n        }).join(\" \"),\n        fill: \"none\",\n        stroke: \"#63dbb3\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this) : growthData.map((data, index) => /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: index * (barWidth + 2),\n        y: svgHeight - data.totalActiveCells * (svgHeight / maxActive),\n        width: barWidth,\n        height: data.totalActiveCells * (svgHeight / maxActive),\n        fill: \"#63dbb3\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: svgWidth / 2 - 20,\n        y: svgHeight - 2,\n        children: \"Time (sec)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: 0,\n        y: svgHeight / 2 - 20,\n        transform: `rotate(-90, 40, ${svgHeight / 2})`,\n        children: \"Active Cells\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Chart","growthData","type","svgHeight","svgWidth","barWidth","length","maxActive","data","totalActiveCells","style","width","height","position","border","children","x","y","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","points","map","index","join","transform","_c","$RefreshReg$"],"sources":["/Users/stutipatel/Desktop/bacteria-growth-simulator/src/components/Chart.tsx"],"sourcesContent":["import React from \"react\";\n\ninterface ChartProps {\n  growthData: Array<{ timestamp: number; totalActiveCells: number }>;\n  type: string;\n}\n\nconst Chart: React.FC<ChartProps> = ({ growthData, type }) => {\n  const svgHeight = 233;\n  const svgWidth = 480;\n  const barWidth = svgWidth / (growthData.length);\n\n  let maxActive = 0;\n  for (const data of growthData) {\n    if (data.totalActiveCells > maxActive) {\n      maxActive = data.totalActiveCells;\n    }\n  }\n\n  return (\n    <div style={{ width: \"100%\", height: \"80%\", position: \"relative\", border: \"0px solid red\" }}>\n      <svg width=\"100%\" height=\"100%\">\n        <rect\n          x={0}\n          y={0}\n          width={svgWidth}\n          height={svgHeight}\n          fill=\"#ececec\"\n          stroke=\"#D3D3D3\"\n          strokeWidth=\"2\"\n        />\n\n        {type === \"line\" ? (\n          <polyline\n            points={growthData.map((data, index) => {\n              const x = index * (barWidth + 2);\n              const y = svgHeight - (data.totalActiveCells * (svgHeight / maxActive));\n              return `${x},${y}`;\n            }).join(\" \")}\n            fill=\"none\"\n            stroke=\"#63dbb3\"\n            strokeWidth=\"2\"\n          />\n        ) : (\n          growthData.map((data, index) => (\n            <rect\n              key={index}\n              x={index * (barWidth + 2)}\n              y={svgHeight - (data.totalActiveCells * (svgHeight / maxActive))}\n              width={barWidth}\n              height={(data.totalActiveCells) * (svgHeight / maxActive)}\n              fill=\"#63dbb3\"\n            />\n          ))\n        )}\n\n        <text x={svgWidth / 2 - 20} y={svgHeight - 2}>Time (sec)</text>\n        <text x={0} y={svgHeight / 2 - 20} transform={`rotate(-90, 40, ${svgHeight / 2})`}>Active Cells</text>\n      </svg>\n    </div>\n  );\n};\n\nexport default Chart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}